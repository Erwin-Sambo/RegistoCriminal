// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RegistoCriminal.Data;

#nullable disable

namespace RegistoCriminal.Migrations
{
    [DbContext(typeof(RegistoCriminalContext))]
    [Migration("20250519132706_AddldentitySchema")]
    partial class AddldentitySchema
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("RegistoCriminal.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NomeCompleto")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("RegistoCriminal.Entities.CertificadoRegisto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Conteudo")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("conteudo");

                    b.Property<DateTime?>("DataEmissao")
                        .HasColumnType("datetime")
                        .HasColumnName("dataEmissao");

                    b.Property<DateTime?>("DataValidade")
                        .HasColumnType("datetime")
                        .HasColumnName("dataValidade");

                    b.Property<string>("EstadoCertificado")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("estadoCertificado");

                    b.Property<int>("IdFuncionarioEmissor")
                        .HasColumnType("int")
                        .HasColumnName("idFuncionarioEmissor");

                    b.Property<int>("IdSolicitacao")
                        .HasColumnType("int")
                        .HasColumnName("idSolicitacao");

                    b.Property<string>("NumeroReferencia")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("numeroReferencia");

                    b.HasKey("Id");

                    b.HasIndex("IdFuncionarioEmissor");

                    b.HasIndex("IdSolicitacao");

                    b.ToTable("CertificadoRegisto");
                });

            modelBuilder.Entity("RegistoCriminal.Entities.Cidadao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("Datanascimento")
                        .HasColumnType("date")
                        .HasColumnName("datanascimento");

                    b.Property<string>("Distrito")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("distrito");

                    b.Property<string>("Endereco")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("endereco");

                    b.Property<int>("IdUtilizador")
                        .HasColumnType("int")
                        .HasColumnName("idUtilizador");

                    b.Property<string>("NumBi")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("numBi");

                    b.Property<string>("Provincia")
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("provincia");

                    b.HasKey("Id");

                    b.HasIndex("IdUtilizador");

                    b.ToTable("Cidadao");
                });

            modelBuilder.Entity("RegistoCriminal.Entities.FuncionarioJudicial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Cargo")
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("cargo");

                    b.Property<string>("Departamento")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("departamento");

                    b.Property<int>("IdUtilizador")
                        .HasColumnType("int")
                        .HasColumnName("idUtilizador");

                    b.Property<string>("Nivelacesso")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("nivelacesso");

                    b.HasKey("Id");

                    b.HasIndex("IdUtilizador");

                    b.ToTable("FuncionarioJudicial");
                });

            modelBuilder.Entity("RegistoCriminal.Entities.Log", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Acao")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ACAO");

                    b.Property<string>("Detalhes")
                        .HasMaxLength(600)
                        .IsUnicode(false)
                        .HasColumnType("varchar(600)")
                        .HasColumnName("DETALHES");

                    b.Property<int>("Iduser")
                        .HasColumnType("int")
                        .HasColumnName("IDUSER");

                    b.Property<string>("Ipaddress")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("ipaddress");

                    b.HasKey("Id");

                    b.HasIndex("Iduser");

                    b.ToTable("logs");
                });

            modelBuilder.Entity("RegistoCriminal.Entities.Pagamento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Datapagamento")
                        .HasColumnType("datetime")
                        .HasColumnName("datapagamento");

                    b.Property<int>("IdSolicitacao")
                        .HasColumnType("int")
                        .HasColumnName("idSolicitacao");

                    b.Property<string>("Metodo")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("metodo");

                    b.Property<string>("Referencia")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("referencia");

                    b.Property<decimal?>("Valor")
                        .HasColumnType("decimal(17, 2)")
                        .HasColumnName("valor");

                    b.HasKey("Id");

                    b.HasIndex("IdSolicitacao");

                    b.ToTable("pagamento");
                });

            modelBuilder.Entity("RegistoCriminal.Entities.RegistosCriminal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("Cumprido")
                        .HasColumnType("bit")
                        .HasColumnName("cumprido");

                    b.Property<DateOnly?>("DataOcorrencia")
                        .HasColumnType("date")
                        .HasColumnName("dataOcorrencia");

                    b.Property<DateTime?>("DataSentenca")
                        .HasColumnType("datetime")
                        .HasColumnName("dataSentenca");

                    b.Property<int>("IdCidado")
                        .HasColumnType("int")
                        .HasColumnName("idCidado");

                    b.Property<string>("NumeroProcesso")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("numeroProcesso");

                    b.Property<string>("Observacoes")
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)")
                        .HasColumnName("observacoes");

                    b.Property<string>("Sentenca")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("sentenca");

                    b.Property<string>("TipoOcorrencia")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("tipoOcorrencia");

                    b.HasKey("Id");

                    b.HasIndex("IdCidado");

                    b.ToTable("RegistosCriminal");
                });

            modelBuilder.Entity("RegistoCriminal.Entities.Solicitacaoregisto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Datasolicitacao")
                        .HasColumnType("datetime")
                        .HasColumnName("datasolicitacao");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("estado");

                    b.Property<string>("Finalidade")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("finalidade");

                    b.Property<string>("Formapagamento")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("formapagamento");

                    b.Property<int>("IdCidado")
                        .HasColumnType("int")
                        .HasColumnName("idCidado");

                    b.Property<bool?>("Pago")
                        .HasColumnType("bit")
                        .HasColumnName("pago");

                    b.Property<bool?>("Urgencia")
                        .HasColumnType("bit")
                        .HasColumnName("urgencia");

                    b.HasKey("Id");

                    b.HasIndex("IdCidado");

                    b.ToTable("Solicitacaoregisto");
                });

            modelBuilder.Entity("RegistoCriminal.Entities.Utilizador", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Datacriacao")
                        .HasColumnType("datetime")
                        .HasColumnName("datacriacao");

                    b.Property<string>("Nivelpermissao")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("nivelpermissao");

                    b.Property<string>("Nomecompleto")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("nomecompleto");

                    b.Property<string>("Senha")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("senha");

                    b.Property<string>("Tipoutilizador")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("tipoutilizador");

                    b.HasKey("Id");

                    b.ToTable("Utilizador");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("RegistoCriminal.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("RegistoCriminal.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RegistoCriminal.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("RegistoCriminal.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RegistoCriminal.Entities.CertificadoRegisto", b =>
                {
                    b.HasOne("RegistoCriminal.Entities.FuncionarioJudicial", "IdFuncionarioEmissorNavigation")
                        .WithMany("CertificadoRegistos")
                        .HasForeignKey("IdFuncionarioEmissor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RegistoCriminal.Entities.Solicitacaoregisto", "IdSolicitacaoNavigation")
                        .WithMany("CertificadoRegistos")
                        .HasForeignKey("IdSolicitacao")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdFuncionarioEmissorNavigation");

                    b.Navigation("IdSolicitacaoNavigation");
                });

            modelBuilder.Entity("RegistoCriminal.Entities.Cidadao", b =>
                {
                    b.HasOne("RegistoCriminal.Entities.Utilizador", "IdUtilizadorNavigation")
                        .WithMany("Cidadaos")
                        .HasForeignKey("IdUtilizador")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdUtilizadorNavigation");
                });

            modelBuilder.Entity("RegistoCriminal.Entities.FuncionarioJudicial", b =>
                {
                    b.HasOne("RegistoCriminal.Entities.Utilizador", "IdUtilizadorNavigation")
                        .WithMany("FuncionarioJudicials")
                        .HasForeignKey("IdUtilizador")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdUtilizadorNavigation");
                });

            modelBuilder.Entity("RegistoCriminal.Entities.Log", b =>
                {
                    b.HasOne("RegistoCriminal.Entities.Utilizador", "IduserNavigation")
                        .WithMany("Logs")
                        .HasForeignKey("Iduser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IduserNavigation");
                });

            modelBuilder.Entity("RegistoCriminal.Entities.Pagamento", b =>
                {
                    b.HasOne("RegistoCriminal.Entities.Solicitacaoregisto", "IdSolicitacaoNavigation")
                        .WithMany("Pagamentos")
                        .HasForeignKey("IdSolicitacao")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdSolicitacaoNavigation");
                });

            modelBuilder.Entity("RegistoCriminal.Entities.RegistosCriminal", b =>
                {
                    b.HasOne("RegistoCriminal.Entities.Cidadao", "IdCidadoNavigation")
                        .WithMany("RegistosCriminals")
                        .HasForeignKey("IdCidado")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdCidadoNavigation");
                });

            modelBuilder.Entity("RegistoCriminal.Entities.Solicitacaoregisto", b =>
                {
                    b.HasOne("RegistoCriminal.Entities.Cidadao", "IdCidadoNavigation")
                        .WithMany("Solicitacaoregistos")
                        .HasForeignKey("IdCidado")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdCidadoNavigation");
                });

            modelBuilder.Entity("RegistoCriminal.Entities.Cidadao", b =>
                {
                    b.Navigation("RegistosCriminals");

                    b.Navigation("Solicitacaoregistos");
                });

            modelBuilder.Entity("RegistoCriminal.Entities.FuncionarioJudicial", b =>
                {
                    b.Navigation("CertificadoRegistos");
                });

            modelBuilder.Entity("RegistoCriminal.Entities.Solicitacaoregisto", b =>
                {
                    b.Navigation("CertificadoRegistos");

                    b.Navigation("Pagamentos");
                });

            modelBuilder.Entity("RegistoCriminal.Entities.Utilizador", b =>
                {
                    b.Navigation("Cidadaos");

                    b.Navigation("FuncionarioJudicials");

                    b.Navigation("Logs");
                });
#pragma warning restore 612, 618
        }
    }
}
